import psycopg2
import pandas as pd
from psycopg2 import sql
from sqlalchemy import create_engine
from sqlalchemy.engine import URL
from sqlalchemy.sql import text
from dotenv import load_dotenv
import os
import json

# Load environment variables from the .env file
#load_dotenv("config.env")

# Database connection parameters from environment variables
DATABASE_URL = URL.create(
    "postgresql+psycopg2",
    username= "postgres",
    password="xxxxxxxxxxxxxxxxx",
    host="postgres_db",
    database="octobre1")


# Create an SQLAlchemy engine
engine = create_engine(DATABASE_URL)

# Function to create database if it does not exist
def create_database():
    try:
        # Connect to the default 'postgres' database to create a new one
        with psycopg2.connect(
            dbname="postgres",
            user="postgres",
            password="xxxxxxxxxxxxxxxxxxxxxxxx",
            host="postgres_db"
        ) as conn:
            conn.autocommit = True
            with conn.cursor() as cur:
                cur.execute("SELECT 1 FROM pg_catalog.pg_database WHERE datname = %s", ("octobre1",))
                exists = cur.fetchone()
                if not exists:
                    cur.execute(sql.SQL("CREATE DATABASE {}").format(sql.Identifier("octobre1")))
                    print("Database 'octobre1' created successfully.")
                else:
                    print("Database 'octobre1' already exists.")
    except Exception as e:
        print(f"Error while creating database: {e}")


# Function to create tables
def create_tables():
    commands = [
        '''
        DROP TABLE IF EXISTS sales CASCADE
        ''' ,
        '''
        DROP TABLE IF EXISTS product CASCADE
        ''',
        '''
        DROP TABLE IF EXISTS clients CASCADE
        ''',
        '''
        DROP TABLE IF EXISTS j_sales CASCADE
        ''',
        '''
        DROP TABLE IF EXISTS j_product CASCADE
        ''',
        '''
        DROP TABLE IF EXISTS j_clients CASCADE
        ''',
        '''
        CREATE TABLE IF NOT EXISTS clients (
            client_id VARCHAR PRIMARY KEY,
            sex CHAR(1),
            birth INTEGER
        )
        ''' ,
        '''
        CREATE TABLE IF NOT EXISTS product (
            product_id VARCHAR PRIMARY KEY,
            category VARCHAR,
            sub_category VARCHAR,
            price NUMERIC,
            stock_quantity INTEGER
        )
        ''',
        '''
       CREATE TABLE IF NOT EXISTS sales (
            id_sales BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
            id_prod VARCHAR,
            date TIMESTAMP,
            session_id VARCHAR,
            client_id VARCHAR,
            quantity_sold INTEGER,
            FOREIGN KEY (id_prod) REFERENCES product(product_id),
            FOREIGN KEY (client_id) REFERENCES clients(client_id)
        )
        ''',
        '''
        CREATE TABLE IF NOT EXISTS j_clients (
            client_id VARCHAR PRIMARY KEY,
            sex CHAR(1),
            birth INTEGER
        )
        ''',
        '''
        CREATE TABLE IF NOT EXISTS j_product (
            product_id VARCHAR PRIMARY KEY,
            category VARCHAR,
            sub_category VARCHAR,
            price NUMERIC,
            stock_quantity INTEGER
        )
        ''',
         '''
       CREATE TABLE IF NOT EXISTS j_sales (
            id_sales BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
            product_id VARCHAR,
            date TIMESTAMP,
            session_id VARCHAR,
            client_id VARCHAR,
            quantity_sold INTEGER,
            FOREIGN KEY (product_id) REFERENCES j_product(product_id),
            FOREIGN KEY (client_id) REFERENCES j_clients(client_id)
        )
        '''
    ]
    
    try:
        with engine.connect() as conn:
            for command in commands:
                conn.execute(text(command))
                print(f"Table created : {command.split()[5]}")
    except Exception as e:
        print(f"Error while creating tables: {e}")

# Function to import data from CSV files into tables with data correction
def import_csv_data():
    files_and_tables = [
        ('data/clients_ready.csv', 'clients', ','),
        ('data/product_ready.csv', 'product', ','),
        ('data/sales_ready.csv', 'sales', ',')
    ]
    
    for file, table, delimiter in files_and_tables:
        try:
            data = pd.read_csv(file, delimiter=delimiter, index_col=False)
            # Import data into the corresponding SQL table
            data.to_sql(table, con=engine, if_exists='append', index=False)
            print(f"Data imported successfully from {file} to {table}")
        except Exception as e:
            print(f"Error while importing data from {file} to {table}: {e}")

# Function to import data from JSON files into tables
def import_json_data():
    json_files_and_tables = [
        ('data/clients.json', 'j_clients'),
        ('data/produits_sous-categorie.json', 'j_product'),
        ('data/ventes.json', 'j_sales')
    ]
    
    for file, table in json_files_and_tables:
        try:
            with open(file, 'r') as f:
                data = json.load(f)
                df = pd.DataFrame(data)
                # Import data into the corresponding SQL table
                df.to_sql(table, con=engine, if_exists='append', index=False)
                print(f"Data imported successfully from {file} to {table}")
        except Exception as e:
            print(f"Error while importing data from {file} to {table}: {e}")


if __name__ == "__main__":
    # Create database if it does not exist
    print("Creating database...")
    create_database()
    # Create tables
    print("Creating tables...")
    create_tables()
    # Import data from CSV files
    print("Importing data from CSV files...")
    import_csv_data()
    print("Data csv import completed.")
    # Import data from JSON files
    print("Importing data from JSON files...")
    import_json_data()
    print("Data json import completed.")
